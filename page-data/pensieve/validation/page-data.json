{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/pensieve/validation",
    "result": {"data":{"markdownRemark":{"html":"<h1>How to validate your input</h1>\n<h2>Introduction</h2>\n<p>Data data data, you can store them use them as value, and build great things from it. What if your data are not reliable anymore? Your business has one thing that needs to be reliable: the <code class=\"language-text\">data</code> that you store.</p>\n<p>You need to validate your input before using it. Where are going to see here how you can do it properly for a REST API. So you can imagine building a business that saves claims and you want that some fields are required, match a pattern and more. You can validate everything so that the data that are coming to your application is reliable and with the format you want.</p>\n<h2>Dependencies</h2>\n<p>Install the dependencies:</p>\n<ul>\n<li><a href=\"https://ajv.js.org/guide/getting-started.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ajv</a></li>\n<li><a href=\"https://expressjs.com/en/5x/api.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">express</a></li>\n<li><a href=\"https://github.com/expressjs/body-parser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">body-parser</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> express ajv body-parser</code></pre></div>\n<p>We are going to use <code class=\"language-text\">ajv</code> for the validation part itself.\r\nFor the REST API itself self we are going to use <code class=\"language-text\">express</code> and add a simple route where we will attach the validation.</p>\n<h2>Server</h2>\n<p>Let's create a simple server to add a route to it and use it for the entry of our validation.</p>\n<p>Add the <code class=\"language-text\">express</code> dependency and create the server instance.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For the <code class=\"language-text\">port</code> note that we have the <code class=\"language-text\">or</code> here because this application will be deployed via <code class=\"language-text\">Heroku</code>, and they will give you a specific port for your app.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To start the server you can use the function <code class=\"language-text\">listen</code> on your instance and providing the <code class=\"language-text\">port</code> and a <code class=\"language-text\">callback</code> function that will be called after the server starts.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">raw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server listening at http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Route</h2>\n<p>Let's add a <code class=\"language-text\">POST</code> route where we are going to capture to data we want to validate. And also respond with the validation errors or if it's valid.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">?</span> <span class=\"token string\">\"It's valid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"It's not\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can see that we take the <code class=\"language-text\">body</code> from the request which we are going to use as input for validation.</p>\n<p>We also have this function that we will detail later: <code class=\"language-text\">isValid</code>. After the validation, we respond with <code class=\"language-text\">It's valid</code> or not depending on the case.</p>\n<h2>Validation</h2>\n<p>Add the <code class=\"language-text\">ajv</code> dependency and create the validator.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Ajv <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ajv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> ajv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ajv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For the validation, we need to create what we call a <code class=\"language-text\">schema</code> where you define the validation on your payload.</p>\n<p>We are going to create a simple schema for a foo bar object type. Just to understand the mechanism.</p>\n<h3>Schema</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">,</span>\r\n  properties<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    foo<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'integer'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    bar<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  required<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n  additionalProperties<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So the object needs to have only <code class=\"language-text\">2 properties</code> and no additional one.</p>\n<ul>\n<li>Foo: will be an <code class=\"language-text\">integer</code> and will also be <code class=\"language-text\">required</code>.</li>\n<li>Bar: will be a simple <code class=\"language-text\">string</code> and not required.</li>\n</ul>\n<h3>Validate</h3>\n<p>Let's implement the <code class=\"language-text\">isValid</code> function we talked about before. We are going to change a bit and add a <code class=\"language-text\">schema</code> as a parameter to validate the input we pass to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">,</span> schema</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> validate <span class=\"token operator\">=</span> ajv<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> valid <span class=\"token operator\">=</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>valid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> validate<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> valid<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Postman</h2>\n<p>We are going to test the validator with a simple call and posting an <code class=\"language-text\">empty object</code> to see the errors.</p>\n<div class=\"gatsby-highlight\" data-language=\"curl\"><pre class=\"language-curl\"><code class=\"language-curl\">curl --location --request POST &#39;http://localhost:3000/&#39; \\\r\n--header &#39;Content-Type: application/json&#39; \\\r\n--data-raw &#39;{}&#39;</code></pre></div>\n<p>Response :</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\r\n  <span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">\"instancePath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"schemaPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#/required\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"keyword\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"required\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"params\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token property\">\"missingProperty\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"must have required property 'foo'\"</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Here is an example with a <code class=\"language-text\">valid</code> payload.</p>\n<div class=\"gatsby-highlight\" data-language=\"curl\"><pre class=\"language-curl\"><code class=\"language-curl\">curl --location --request POST &#39;http://localhost:3000/&#39; \\\r\n--header &#39;Content-Type: application/json&#39; \\\r\n--data-raw &#39;{\r\n    &quot;foo&quot;: 1,\r\n    &quot;bar&quot;: &quot;bar&quot;\r\n}&#39;</code></pre></div>\n<p>Response :</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">\"valid\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Middleware</h2>\n<p>Developers are lazy persons right? We like automation we don't want to write this for all kinds of <code class=\"language-text\">validation</code>. To repeat and isolate the process we are going to create a <code class=\"language-text\">middleware</code> that we could attach to any route to have a validation on early stage.\r\nTo have a scalable way to add schema validation we can separate here 3 things :</p>\n<ul>\n<li>The <code class=\"language-text\">middleware</code> for the validation only.</li>\n<li>The <code class=\"language-text\">validator</code> is generic for all schemas.</li>\n<li>The <code class=\"language-text\">schema</code> for the type of input.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VALIDATION_ERROR\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Validation of the payload \"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token property\">\"details\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n    <span class=\"token punctuation\">{</span>\r\n      <span class=\"token property\">\"instancePath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token property\">\"schemaPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#/required\"</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token property\">\"keyword\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"required\"</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token property\">\"params\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token property\">\"missingProperty\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"must have required property 'foo'\"</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For the <code class=\"language-text\">schema</code> we create a file for it <code class=\"language-text\">./schemas/foo.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">,</span>\r\n  properties<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    foo<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'integer'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    bar<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  required<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n  additionalProperties<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For the <code class=\"language-text\">middleware</code> we create a file for it <code class=\"language-text\">./middlewares/validator.js</code>.\r\nHere you pass the <code class=\"language-text\">schema</code> as a <code class=\"language-text\">parameter</code> that is used to validate the <code class=\"language-text\">req.body</code>.\r\nIf the validation fails we send a <code class=\"language-text\">404</code> error with a nice <code class=\"language-text\">code</code> and a <code class=\"language-text\">message</code> and the <code class=\"language-text\">details</code> of why it failed.\r\nWhen everything went good it just passes to the next function. To read more about <a href=\"http://expressjs.com/en/guide/using-middleware.html#using-middleware\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">middleware</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isValid <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../utils/validator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">schema</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> schema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// array means we have errors</span>\r\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'VALIDATION_ERROR'</span><span class=\"token punctuation\">,</span>\r\n      message<span class=\"token operator\">:</span> <span class=\"token string\">'Validation of the payload '</span><span class=\"token punctuation\">,</span>\r\n      details<span class=\"token operator\">:</span> result<span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For the <code class=\"language-text\">utils</code> we create a file for it <code class=\"language-text\">./utils/validator.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Ajv <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ajv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> ajv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ajv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">,</span> schema</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> validate <span class=\"token operator\">=</span> ajv<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> valid <span class=\"token operator\">=</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>valid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> validate<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> valid<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  isValid<span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Source</h2>\n<p><a href=\"https://github.com/hamzaPixl/posts-validation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a></p>\n<p><a href=\"https://hmounir.com/pensieve/validation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Blog</a></p>\n<h2>License</h2>\n<p>Distributed under the MIT License. See <code class=\"language-text\">LICENSE</code> for more information.</p>\n<h2>Contact</h2>\n<p>Hamza Mounir - <a href=\"https://twitter.com/pixlhamza\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@pixlhamza</a> - <a href=\"mailto:hamza.pixelle@gmail.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hamza.pixelle@gmail.com</a></p>\n<h2>Support</h2>\n<p>Give a ⭐️ if you like this post!</p>","frontmatter":{"title":"How to validate your input","description":"How to do validation for you REST application.","date":"2021-08-21T00:00:00.000Z","slug":"/pensieve/validation","tags":["Validation","Ajv","Input","REST"]}}},"pageContext":{}},
    "staticQueryHashes": ["1151383948","1364744041","1374383533","2543263646","2604261230","3149095931","3469851102","3539500889"]}